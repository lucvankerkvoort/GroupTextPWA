{"version":3,"sources":["components/Navbar/navbar-items.js","components/Navbar/navbar.js","components/Jumbotron/jumbotron.js","pages/HomePage.js","App.js","serviceWorker.js","index.js","services/Store.js"],"names":["navbarItems","name","link","Navbar","showElement","dispatch","useContext","store","className","to","style","textDecoration","color","map","element","i","key","onClick","type","payload","handleClick","Jumbotron","text","Homepage","React","Component","Modal","lazy","Help","About","CreateGroup","App","props","useState","setShowElement","handleInfo","basename","fallback","close","info","path","render","component","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","initialState","authed","createContext","Provider","StateProvider","children","useReducer","action","Object","assign","groups","questions","data","cur_group_id","login","members","question","addedGroup","check","Error","value"],"mappings":"gPAAaA,EAAc,CACzB,CAAEC,KAAM,OAAQC,KAAM,KACtB,CACED,KAAM,eACNC,KAAM,gBAER,CACED,KAAM,SAER,CACEA,KAAM,OACNC,KAAM,SAER,CACED,KAAM,QACNC,KAAM,UAER,CACED,KAAM,a,OC4BKE,EAxCA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAERC,EADSC,qBAAWC,KACpBF,SAMR,OACE,yBAAKG,UAAU,UACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,UACnD,2CAGJ,yBAAKJ,UAAU,gBACZR,EAAYa,KAAI,SAACC,EAASC,GACzB,MAAqB,UAAjBD,EAAQb,MAAqC,aAAjBa,EAAQb,KAEpC,uBAAGe,IAAKD,EAAGE,QAAS,kBAfZ,SAACH,GACnBT,EAAS,CAAEa,KAAM,aAAcC,QAASL,IACxCV,GAAY,GAawBgB,CAAYN,EAAQb,QAC3Ca,EAAQb,MAKX,kBAAC,IAAD,CACEe,IAAKD,EACLN,GAAIK,EAAQZ,KACZQ,MAAO,CAAEC,eAAgB,OAAQC,MAAO,UAExC,uBAAGI,IAAKD,GAAID,EAAQb,a,uCC1BrBoB,MARf,YAA8B,IAATC,EAAQ,EAARA,KACnB,OACE,yBAAKd,UAAU,aACb,4BAAKc,KCQIC,E,uKARX,OACE,yBAAKf,UAAU,YACb,kBAAC,EAAD,CAAWc,KAAK,8C,GAJDE,IAAMC,WCEvBC,G,MAAQF,IAAMG,MAAK,kBAAM,iCACzBC,EAAOJ,IAAMG,MAAK,kBAAM,gCACxBE,EAAQL,IAAMG,MAAK,kBAAM,gCACzBG,EAAcN,IAAMG,MAAK,kBAAM,gCA2BtBI,EAzBH,SAACC,GAAW,IAAD,EACiBC,oBAAS,GAD1B,mBACd7B,EADc,KACD8B,EADC,KAGbC,EAAeH,EAAfG,WACR,OACE,yBAAK3B,UAAU,OACb,kBAAC,IAAD,CAAY4B,SAAS,KAClBhC,EACC,kBAAC,WAAD,CAAUiC,SAAU,wBAAI7B,UAAU,WAAd,gBAClB,kBAACkB,EAAD,CAAOY,MAAO,kBAAMJ,GAAe,IAAQK,KAAMJ,KAEjD,KACJ,kBAAC,EAAD,CAAQ/B,YAAa,kBAAM8B,GAAe,MAE1C,kBAAC,WAAD,CAAUG,SAAU,wBAAI7B,UAAU,WAAd,gBAClB,kBAAC,IAAD,CAAOgC,KAAK,eAAeC,OAAQ,kBAAM,kBAACX,EAAD,SACzC,kBAAC,IAAD,CAAOU,KAAK,QAAQE,UAAWd,IAC/B,kBAAC,IAAD,CAAOY,KAAK,SAASE,UAAWb,KAElC,kBAAC,IAAD,CAAOc,OAAK,EAACH,KAAK,IAAIE,UAAWnB,OCjBnCqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAAS7B,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF8B,SAASC,eAAe,SDWnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,gBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,gBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAACwB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAACC,GAClCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OClC/BE,I,+HCdMmC,EAAe,CAAEC,QAAQ,GACzBnF,EAAQoF,wBAAcF,GACpBG,EAAarF,EAAbqF,SAEFC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACZC,sBAAW,SAACjC,EAAOkC,GAC3C,OAAQA,EAAO9E,MACb,IAAK,YACH,OAAO+E,OAAOC,OAAO,GAAIpC,EAAO,CAAEqC,OAAQH,EAAO7E,UACnD,IAAK,eACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAEsC,UAAWJ,EAAO7E,UACtD,IAAK,aACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAEhD,QAASkF,EAAO7E,UACpD,IAAK,UACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAEuC,KAAML,EAAO7E,UACjD,IAAK,aACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAEwC,aAAcN,EAAO7E,UACzD,IAAK,eACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAEL,aAAcuC,EAAO7E,UACzD,IAAK,QACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAEyC,MAAOP,EAAO7E,UAClD,IAAK,SACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAE0C,QAASR,EAAO7E,UACpD,IAAK,WACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAE2C,SAAUT,EAAO7E,UACrD,IAAK,WACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAE4C,WAAYV,EAAO7E,UACvD,IAAK,QACH,OAAO8E,OAAOC,OAAO,GAAIpC,EAAO,CAAE6C,MAAOX,EAAO7E,UAClD,QACE,MAAM,IAAIyF,SAEbnB,GA5BmC,mBAC/B3B,EAD+B,KACxBzD,EADwB,KA8BtC,OAAO,kBAACuF,EAAD,CAAUiB,MAAO,CAAE/C,QAAOzD,aAAayF,M","file":"static/js/main.a3f941d9.chunk.js","sourcesContent":["export const navbarItems = [\r\n  { name: \"Home\", link: \"/\" },\r\n  {\r\n    name: \"Create Group\",\r\n    link: \"/creategroup\",\r\n  },\r\n  {\r\n    name: \"Login\",\r\n  },\r\n  {\r\n    name: \"Help\",\r\n    link: \"/help\",\r\n  },\r\n  {\r\n    name: \"About\",\r\n    link: \"/about\",\r\n  },\r\n  {\r\n    name: \"Register\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { navbarItems } from \"./navbar-items\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useContext } from \"react\";\r\nimport { store } from \"../../services/Store\";\r\n\r\nconst Navbar = ({ showElement }) => {\r\n  const userData = useContext(store);\r\n  const { dispatch } = userData;\r\n\r\n  const handleClick = (element) => {\r\n    dispatch({ type: \"setElement\", payload: element });\r\n    showElement(true);\r\n  };\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"logo\">\r\n        <Link to=\"/\" style={{ textDecoration: \"none\", color: \"black\" }}>\r\n          <p>Group Text</p>\r\n        </Link>\r\n      </div>\r\n      <div className=\"navbar-items\">\r\n        {navbarItems.map((element, i) => {\r\n          if (element.name === \"Login\" || element.name === \"Register\") {\r\n            return (\r\n              <p key={i} onClick={() => handleClick(element.name)}>\r\n                {element.name}\r\n              </p>\r\n            );\r\n          } else {\r\n            return (\r\n              <Link\r\n                key={i}\r\n                to={element.link}\r\n                style={{ textDecoration: \"none\", color: \"black\" }}\r\n              >\r\n                <p key={i}>{element.name}</p>\r\n              </Link>\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ text }) {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <h2>{text}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron/jumbotron\";\r\n\r\nclass Homepage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"homepage\">\r\n        <Jumbotron text=\"Ask a Question to a Group of Friends\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Homepage;\r\n","import React, { useState, Suspense } from \"react\";\nimport Navbar from \"./components/Navbar/navbar\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Homepage from \"./pages/HomePage\";\nimport \"./styles/import.scss\";\nconst Modal = React.lazy(() => import(\"./components/Modal/modal\"));\nconst Help = React.lazy(() => import(\"./pages/Help\"));\nconst About = React.lazy(() => import(\"./pages/About\"));\nconst CreateGroup = React.lazy(() => import(\"./pages/CreateGroup\"));\n\nconst App = (props) => {\n  const [showElement, setShowElement] = useState(false);\n\n  const { handleInfo } = props;\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        {showElement ? (\n          <Suspense fallback={<h1 className=\"loading\">....Loading</h1>}>\n            <Modal close={() => setShowElement(false)} info={handleInfo} />\n          </Suspense>\n        ) : null}\n        <Navbar showElement={() => setShowElement(true)} />\n\n        <Suspense fallback={<h1 className=\"loading\">....Loading</h1>}>\n          <Route path=\"/creategroup\" render={() => <CreateGroup />} />\n          <Route path=\"/help\" component={Help} />\n          <Route path=\"/about\" component={About} />\n        </Suspense>\n        <Route exact path=\"/\" component={Homepage} />\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { StateProvider } from \"./services/Store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <StateProvider>\r\n    <App />\r\n  </StateProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","import React, { createContext, useReducer } from \"react\";\r\n// voor nu even true!!\r\nconst initialState = { authed: true };\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n      case \"setGroups\":\r\n        return Object.assign({}, state, { groups: action.payload });\r\n      case \"setQuestions\":\r\n        return Object.assign({}, state, { questions: action.payload });\r\n      case \"setElement\":\r\n        return Object.assign({}, state, { element: action.payload });\r\n      case \"setInfo\":\r\n        return Object.assign({}, state, { data: action.payload });\r\n      case \"setCurrent\":\r\n        return Object.assign({}, state, { cur_group_id: action.payload });\r\n      case \"registration\":\r\n        return Object.assign({}, state, { registration: action.payload });\r\n      case \"login\":\r\n        return Object.assign({}, state, { login: action.payload });\r\n      case \"member\":\r\n        return Object.assign({}, state, { members: action.payload });\r\n      case \"question\":\r\n        return Object.assign({}, state, { question: action.payload });\r\n      case \"addGroup\":\r\n        return Object.assign({}, state, { addedGroup: action.payload });\r\n      case \"check\":\r\n        return Object.assign({}, state, { check: action.payload });\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider };\r\n"],"sourceRoot":""}